a1 d1 e1
a2 d2 e2
a3 d3 e3
b1 c1 z1
b2 c2 z2
b3 c3 z3
r1 s1 r2 s2 r3 s3
END

a1d1e1e3
a2d2e1e2
a3d3e2e3
d1d2d3e1e2e3
a1b1c1z1 b1d1r1 c1e1s1 a1b1c1d1e1
a2b2c2z2 b2d2r2 c2e2s2 a2b2c2d2e2
a3b3c3z3 b3d3r3 c3e3s3 a3b3c3d3e3
END

d1d2d3e1e2e3
b1c1z1 b1d1r1 c1e1s1 a1b1c1d1e1
b2c2z2 b2d2r2 c2e2s2 a2b2c2d2e2
b3c3z3 b3d3r3 c3e3s3 a3b3c3d3e3
END

// This is the translation from (Python) HellyTool project to C++ HellyToolCpp project, of the
// Helly "widget" "widget3orv3.py". (Note, comments only permissible after the third "END" in the
// current implementation of C++ code for reading in a "widget".)
// The last line of the "cover" section (the third section above) is the assignment of a truth value
// to the widget that one wishes to test.

// Note that the extant Python code uses "simplifycovers" to remove any edges in a cover that
// are covered by a larger set already (that is, being a friend to the project of showing it is an RS-cover,
// since removing such a covering set increases the possibility of passing the triangle test,
// while not removing the property of being a cover for the edges.
// While coding "simplifycovers" in C++, we've just noted the Python output states that three edges sets
//are removed:
// a1d1e1
// a2d2e2
// a3d3e3
// So for now these are removed manually.

// FFF: a1b1z1 a2b2z2 a3b3z3 a1e1e3 a2e2e1 a3e2e3
// FFT: a1b1z1 a2b2z2 a3c3z3 a1e1e3 a2e2e1 a3e2d3
// FTF: a1b1z1 a2c2z2 a3b3z3 a1e1e3 a2e1d2 a3e2e3
// FTT: a1b1z1 a2c2z2 a3c3z3 a1e1e3 a2e1d2 a3e2d3
// TFF: a1c1z1 a2b2z2 a3b3z3 a1d1e3 a2e2e1 a3e2e3
// TFT: a1c1z1 a2b2z2 a3c3z3 a1d1e3 a2e2e1 a3e2d3
// TTF: a1c1z1 a2c2z2 a3b3z3 a1d1e3 a2e1d2 a3e2e3
// TTT: a1c1z1 a2c2z2 a3c3z3 a1d1e3 a2e1d2 a3e2d3
